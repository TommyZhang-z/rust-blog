{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p> FastAPI framework, high performance, easy to learn, fast to code, ready for production </p> <p>Documentation: https://fastapi.tiangolo.com</p> <p>Source Code: https://github.com/tiangolo/fastapi</p> <p>FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints.</p> <p>The key features are:</p> <ul> <li>Fast: Very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). One of the fastest Python frameworks available.</li> <li>Fast to code: Increase the speed to develop features by about 200% to 300%. *</li> <li>Fewer bugs: Reduce about 40% of human (developer) induced errors. *</li> <li>Intuitive: Great editor support. Completion everywhere. Less time debugging.</li> <li>Easy: Designed to be easy to use and learn. Less time reading docs.</li> <li>Short: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.</li> <li>Robust: Get production-ready code. With automatic interactive documentation.</li> <li>Standards-based: Based on (and fully compatible with) the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema.</li> </ul> <p>* estimation based on tests on an internal development team, building production applications.</p>"},{"location":"#opinions","title":"Opinions","text":"<p>\"[...] I'm using FastAPI a ton these days. [...] I'm actually planning to use it for all of my team's ML services at Microsoft. Some of them are getting integrated into the core Windows product and some Office products.\"</p> Kabir Khan - Microsoft (ref) <p>\"We adopted the FastAPI library to spawn a REST server that can be queried to obtain predictions. [for Ludwig]\"</p> Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - Uber (ref) <p>\"Netflix is pleased to announce the open-source release of our crisis management orchestration framework: Dispatch! [built with FastAPI]\"</p> Kevin Glisson, Marc Vilanova, Forest Monsen - Netflix (ref) <p>\"I\u2019m over the moon excited about FastAPI. It\u2019s so fun!\"</p> Brian Okken - Python Bytes podcast host (ref) <p>\"Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted Hug to be - it's really inspiring to see someone build that.\"</p> Timothy Crosley - Hug creator (ref) <p>\"If you're looking to learn one modern framework for building REST APIs, check out FastAPI [...] It's fast, easy to use and easy to learn [...]\"</p> <p>\"We've switched over to FastAPI for our APIs [...] I think you'll like it [...]\"</p> Ines Montani - Matthew Honnibal - Explosion AI founders - spaCy creators (ref) - (ref) <p>\"If anyone is looking to build a production Python API, I would highly recommend FastAPI. It is beautifully designed, simple to use and highly scalable, it has become a key component in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer.\"</p> Deon Pillsbury - Cisco (ref)"},{"location":"#typer-the-fastapi-of-clis","title":"Typer, the FastAPI of CLIs","text":"<p>If you are building a CLI app to be used in the terminal instead of a web API, check out Typer.</p> <p>Typer is FastAPI's little sibling. And it's intended to be the FastAPI of CLIs. \u2328\ufe0f \ud83d\ude80</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.7+</p> <p>FastAPI stands on the shoulders of giants:</p> <ul> <li>Starlette for the web parts.</li> <li>Pydantic for the data parts.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install fastapi\n\n---&gt; 100%\n</code></pre> <p>You will also need an ASGI server, for production such as Uvicorn or Hypercorn.</p> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre>"},{"location":"#example","title":"Example","text":""},{"location":"#create-it","title":"Create it","text":"<ul> <li>Create a file <code>main.rs</code> with:</li> </ul> <pre><code>fn main() {\nprintln!(\"Hello, World!\");\n}\n</code></pre> <p>Note:</p> <p>If you don't know, check the \"In a hurry?\" section about <code>async</code> and <code>await</code> in the docs.</p>"},{"location":"#run-it","title":"Run it","text":"<p>Run the server with:</p> <pre><code>$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> About the command <code>uvicorn main:app --reload</code>... <p>The command <code>uvicorn main:app</code> refers to:</p> <ul> <li><code>main</code>: the file <code>main.py</code> (the Python \"module\").</li> <li><code>app</code>: the object created inside of <code>main.py</code> with the line <code>app = FastAPI()</code>.</li> <li><code>--reload</code>: make the server restart after code changes. Only do this for development.</li> </ul>"},{"location":"#check-it","title":"Check it","text":"<p>Open your browser at http://127.0.0.1:8000/items/5?q=somequery.</p> <p>You will see the JSON response as:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre> <p>You already created an API that:</p> <ul> <li>Receives HTTP requests in the paths <code>/</code> and <code>/items/{item_id}</code>.</li> <li>Both paths take <code>GET</code> operations (also known as HTTP methods).</li> <li>The path <code>/items/{item_id}</code> has a path parameter <code>item_id</code> that should be an <code>int</code>.</li> <li>The path <code>/items/{item_id}</code> has an optional <code>str</code> query parameter <code>q</code>.</li> </ul>"},{"location":"#interactive-api-docs","title":"Interactive API docs","text":"<p>Now go to http://127.0.0.1:8000/docs.</p> <p>You will see the automatic interactive API documentation (provided by Swagger UI):</p> <p></p>"},{"location":"#alternative-api-docs","title":"Alternative API docs","text":"<p>And now, go to http://127.0.0.1:8000/redoc.</p> <p>You will see the alternative automatic documentation (provided by ReDoc):</p> <p></p>"},{"location":"#example-upgrade","title":"Example upgrade","text":"<p>Now modify the file <code>main.py</code> to receive a body from a <code>PUT</code> request.</p> <p>Declare the body using standard Python types, thanks to Pydantic.</p> <pre><code>from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\napp = FastAPI()\n\n\nclass Item(BaseModel):\nname: str\nprice: float\nis_offer: Union[bool, None] = None\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\nreturn {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>The server should reload automatically (because you added <code>--reload</code> to the <code>uvicorn</code> command above).</p>"},{"location":"#interactive-api-docs-upgrade","title":"Interactive API docs upgrade","text":"<p>Now go to http://127.0.0.1:8000/docs.</p> <ul> <li>The interactive API documentation will be automatically updated, including the new body:</li> </ul> <p></p> <ul> <li>Click on the button \"Try it out\", it allows you to fill the parameters and directly interact with the API:</li> </ul> <p></p> <ul> <li>Then click on the \"Execute\" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:</li> </ul> <p></p>"},{"location":"#alternative-api-docs-upgrade","title":"Alternative API docs upgrade","text":"<p>And now, go to http://127.0.0.1:8000/redoc.</p> <ul> <li>The alternative documentation will also reflect the new query parameter and body:</li> </ul> <p></p>"},{"location":"#recap","title":"Recap","text":"<p>In summary, you declare once the types of parameters, body, etc. as function parameters.</p> <p>You do that with standard modern Python types.</p> <p>You don't have to learn a new syntax, the methods or classes of a specific library, etc.</p> <p>Just standard Python 3.7+.</p> <p>For example, for an <code>int</code>:</p> <pre><code>item_id: int\n</code></pre> <p>or for a more complex <code>Item</code> model:</p> <pre><code>item: Item\n</code></pre> <p>...and with that single declaration you get:</p> <ul> <li>Editor support, including:<ul> <li>Completion.</li> <li>Type checks.</li> </ul> </li> <li>Validation of data:<ul> <li>Automatic and clear errors when the data is invalid.</li> <li>Validation even for deeply nested JSON objects.</li> </ul> </li> <li>Conversion of input data: coming from the network to Python data and types. Reading from:<ul> <li>JSON.</li> <li>Path parameters.</li> <li>Query parameters.</li> <li>Cookies.</li> <li>Headers.</li> <li>Forms.</li> <li>Files.</li> </ul> </li> <li>Conversion of output data: converting from Python data and types to network data (as JSON):<ul> <li>Convert Python types (<code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>list</code>, etc).</li> <li><code>datetime</code> objects.</li> <li><code>UUID</code> objects.</li> <li>Database models.</li> <li>...and many more.</li> </ul> </li> <li>Automatic interactive API documentation, including 2 alternative user interfaces:<ul> <li>Swagger UI.</li> <li>ReDoc.</li> </ul> </li> </ul> <p>Coming back to the previous code example, FastAPI will:</p> <ul> <li>Validate that there is an <code>item_id</code> in the path for <code>GET</code> and <code>PUT</code> requests.</li> <li>Validate that the <code>item_id</code> is of type <code>int</code> for <code>GET</code> and <code>PUT</code> requests.<ul> <li>If it is not, the client will see a useful, clear error.</li> </ul> </li> <li>Check if there is an optional query parameter named <code>q</code> (as in <code>http://127.0.0.1:8000/items/foo?q=somequery</code>) for <code>GET</code> requests.<ul> <li>As the <code>q</code> parameter is declared with <code>= None</code>, it is optional.</li> <li>Without the <code>None</code> it would be required (as is the body in the case with <code>PUT</code>).</li> </ul> </li> <li>For <code>PUT</code> requests to <code>/items/{item_id}</code>, Read the body as JSON:<ul> <li>Check that it has a required attribute <code>name</code> that should be a <code>str</code>.</li> <li>Check that it has a required attribute <code>price</code> that has to be a <code>float</code>.</li> <li>Check that it has an optional attribute <code>is_offer</code>, that should be a <code>bool</code>, if present.</li> <li>All this would also work for deeply nested JSON objects.</li> </ul> </li> <li>Convert from and to JSON automatically.</li> <li>Document everything with OpenAPI, that can be used by:<ul> <li>Interactive documentation systems.</li> <li>Automatic client code generation systems, for many languages.</li> </ul> </li> <li>Provide 2 interactive documentation web interfaces directly.</li> </ul> <p>We just scratched the surface, but you already get the idea of how it all works.</p> <p>Try changing the line with:</p> <pre><code>    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>...from:</p> <pre><code>        ... \"item_name\": item.name ...\n</code></pre> <p>...to:</p> <pre><code>        ... \"item_price\": item.price ...\n</code></pre> <p>...and see how your editor will auto-complete the attributes and know their types:</p> <p></p> <p>For a more complete example including more features, see the Tutorial - User Guide.</p> <p>Spoiler alert: the tutorial - user guide includes:</p> <ul> <li>Declaration of parameters from other different places as: headers, cookies, form fields and files.</li> <li>How to set validation constraints as <code>maximum_length</code> or <code>regex</code>.</li> <li>A very powerful and easy to use Dependency Injection system.</li> <li>Security and authentication, including support for OAuth2 with JWT tokens and HTTP Basic auth.</li> <li>More advanced (but equally easy) techniques for declaring deeply nested JSON models (thanks to Pydantic).</li> <li>GraphQL integration with Strawberry and other libraries.</li> <li>Many extra features (thanks to Starlette) as:<ul> <li>WebSockets</li> <li>extremely easy tests based on HTTPX and <code>pytest</code></li> <li>CORS</li> <li>Cookie Sessions</li> <li>...and more.</li> </ul> </li> </ul>"},{"location":"#performance","title":"Performance","text":"<p>Independent TechEmpower benchmarks show FastAPI applications running under Uvicorn as one of the fastest Python frameworks available, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)</p> <p>To understand more about it, see the section Benchmarks.</p>"},{"location":"#optional-dependencies","title":"Optional Dependencies","text":"<p>Used by Pydantic:</p> <ul> <li><code>ujson</code> - for faster JSON \"parsing\".</li> <li><code>email_validator</code> - for email validation.</li> </ul> <p>Used by Starlette:</p> <ul> <li><code>httpx</code> - Required if you want to use the <code>TestClient</code>.</li> <li><code>jinja2</code> - Required if you want to use the default template configuration.</li> <li><code>python-multipart</code> - Required if you want to support form \"parsing\", with <code>request.form()</code>.</li> <li><code>itsdangerous</code> - Required for <code>SessionMiddleware</code> support.</li> <li><code>pyyaml</code> - Required for Starlette's <code>SchemaGenerator</code> support (you probably don't need it with FastAPI).</li> <li><code>ujson</code> - Required if you want to use <code>UJSONResponse</code>.</li> </ul> <p>Used by FastAPI / Starlette:</p> <ul> <li><code>uvicorn</code> - for the server that loads and serves your application.</li> <li><code>orjson</code> - Required if you want to use <code>ORJSONResponse</code>.</li> </ul> <p>You can install all of these with <code>pip install \"fastapi[all]\"</code>.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"rust-blogs/","title":"Write 2048 Using Rust!","text":""},{"location":"rust-blogs/#background-information","title":"Background Information","text":"<p>In all fundamental programming courses, I have always been required to do exercises like tic-tac-toe, hangman, minesweeper and 2048.</p> <p>Personally I found tic-tac-toe, hangman and minesweeper too <code>\"unchallenging\"</code>. \ud83e\udd14</p> <p>My initial thoughts were to share about how to write 2048 in Rust, or Word Ladder II in Rust (its a Leetcode hard question that I did in COMP6771).</p> <p>Well, I decide to write a blog for each of them (since we can earn up to 10 course marks with 5 blogs \ud83d\ude03).</p> <p>Word Ladder 2 is more of a BFS DFS algo thing, and it requires to use things like HashMaps and Queues, so I will leave it to the next blog..(or the blog after the, if I decide to do a testing blog to 2048 as next blog\ud83d\ude02)</p> <p>I have been planning the blog since week 2, however decorating and configuring the blog took most of my time\ud83d\ude05.</p>"},{"location":"rust-blogs/#game-design-patterns","title":"Game Design Patterns","text":"<ul> <li>We will be using usize for each block on the game board since the maximum number of a block is <code>131,072</code> (according to this post), usize should be more than enough, and since the blocks can only contains positive number from <code>2</code> to <code>131,072</code>, therefore we will be using unsigned integers.</li> </ul> <pre><code>// let each_block: i32 = ...\nlet each_block: usize = ...\n</code></pre> <ul> <li>Instead of using a 2d array, we will be using vector of vector as the game board, since its easier to perform operation</li> </ul> <pre><code>// let board: [[usize; 4]; 4] = ...\nlet board: Vec&lt;Vec&lt;usize&gt;&gt; = ...\n</code></pre> <ul> <li>The only row operation we need is row merge left (I will explain why we don't need the others later) </li> <li>this operation merges pairs of block with the same value beside each other once, and replace the empty spots with zeros</li> </ul> <pre><code>let mut v: Vec&lt;usize&gt; = vec![8, 8, 4, 4];\nrow_merge_left(&amp;mut v);\n\nprintln!(\"{v:?}\");  // [16, 8, 0, 0]\n</code></pre> <ul> <li>If we apply row_merge_left to all rows then it would be matrix merge left.</li> </ul> <pre><code>matrix.iter_mut().foreach(|row| {\nrow_merge_left(row); // Merge the row to the left \n});\n</code></pre> <ul> <li>Now if we want to merge matrix to the right, here is the logic of how to do that   For each row in matrix, reverse the row and perform row_merge_left, then we reverse back, so the actual operation performed is row merge right</li> </ul> <pre><code>matrix.iter_mut().for_each(|row| {\nrow.reverse(); // Reverse the elements in the row\nrow_merge_left(row); // Merge the row to the left \nrow.reverse(); // Reverse the elements in the row back\n});\n</code></pre> <ul> <li> <p>We are half way done!!</p> </li> <li> <p> matrix merge left</p> </li> <li> matrix merge right</li> <li> matrix merge up</li> <li> matrix merge down</li> </ul> <ul> <li> <p>The key concept for matrix merge up and matrix merge down is that to perform matrix transform.   In linear algebra, we know that the transpose of a matrix is obtained by swapping its rows and columns, and taking the transpose of this result gives us the original matrix.</p> </li> <li> <p>Therefore we can implement matrix merge up as the following</p> </li> </ul> <pre><code>transpose(matrix);\n... // matrix merge left code goes here\ntranspose(matrix);\n</code></pre> <ul> <li>Same for matrix merge down</li> </ul> <pre><code>transpose(matrix);\n... // matrix merge right code goes here\ntranspose(matrix);\n</code></pre> <p>We have now designed all the operation that 2048 needed!</p> <ul> <li> matrix merge left</li> <li> matrix merge right</li> <li> matrix merge up</li> <li> matrix merge down</li> </ul> <p>We are now ready to code! \ud83e\udd29</p>"},{"location":"rust-blogs/#implementation","title":"Implementation","text":""},{"location":"rust-blogs/#creating-project","title":"Creating Project","text":"<ul> <li>Create <code>Rust</code> project with the following command:</li> </ul> <pre><code>$ cargo new game2048\n---&gt; 100%\n</code></pre> <ul> <li>Current Project Structure (ignore file <code>.gitignore</code> and folder <code>/target</code>)</li> </ul> <pre><code>game2048/\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src/\n\u2514\u2500\u2500 main.rs\n</code></pre>"}]}