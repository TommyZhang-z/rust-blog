{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home Page","text":""},{"location":"rust-blogs/","title":"Write 2048 Using Rust!","text":""},{"location":"rust-blogs/#background-information","title":"Background Information","text":"<p>In all fundamental programming courses, I have always been required to do exercises like tic-tac-toe, hangman, minesweeper and 2048.</p> <p>Personally I found tic-tac-toe, hangman and minesweeper too <code>\"unchallenging\"</code>. \ud83e\udd14</p> <p>My initial thoughts were to share about how to write 2048 in Rust, or Word Ladder II in Rust (its a Leetcode hard question that I did in COMP6771).</p> <p>Well, I decide to write a blog for each of them (since we can earn up to 10 course marks with 5 blogs \ud83d\ude03).</p> <p>Word Ladder 2 is more of a BFS DFS algo thing, and it requires to use things like HashMaps and Queues, so I will leave it to the next blog..(or the blog after the, if I decide to do a testing blog to 2048 as next blog\ud83d\ude02)</p> <p>I have been planning the blog since week 2, however decorating and configuring the blog took most of my time\ud83d\ude05.</p>"},{"location":"rust-blogs/#game-design-patterns","title":"Game Design Patterns","text":"<ul> <li>We will be using usize for each block on the game board since the maximum number of a block is <code>131,072</code> (according to this post), usize should be more than enough, and since the blocks can only contains positive number from <code>2</code> to <code>131,072</code>, therefore we will be using unsigned integers.</li> </ul> <pre><code>// let each_block: i32 = ...\nlet each_block: usize = ...\n</code></pre> <ul> <li>Instead of using a 2d array, we will be using vector of vector as the game board, since its easier to perform operation</li> </ul> <pre><code>// let board: [[usize; 4]; 4] = ...\nlet board: Vec&lt;Vec&lt;usize&gt;&gt; = ...\n</code></pre> <ul> <li>The only row operation we need is row merge left (I will explain why we don't need the others later) </li> <li>this operation merges pairs of block with the same value beside each other once, and replace the empty spots with zeros</li> </ul> <pre><code>let mut v: Vec&lt;usize&gt; = vec![8, 8, 4, 4];\nrow_merge_left(&amp;mut v);\n\nprintln!(\"{v:?}\");  // [16, 8, 0, 0]\n</code></pre> <ul> <li>If we apply row_merge_left to all rows then it would be matrix merge left.</li> </ul> <pre><code>matrix.iter_mut().foreach(|row| {\nrow_merge_left(row); // Merge the row to the left \n});\n</code></pre> <ul> <li>Now if we want to merge matrix to the right, here is the logic of how to do that   For each row in matrix, reverse the row and perform row_merge_left, then we reverse back, so the actual operation performed is row merge right</li> </ul> <pre><code>matrix.iter_mut().for_each(|row| {\nrow.reverse(); // Reverse the elements in the row\nrow_merge_left(row); // Merge the row to the left \nrow.reverse(); // Reverse the elements in the row back\n});\n</code></pre> <ul> <li> <p>We are half way done!!</p> </li> <li> <p> matrix merge left</p> </li> <li> matrix merge right</li> <li> matrix merge up</li> <li> matrix merge down</li> </ul> <ul> <li> <p>The key concept for matrix merge up and matrix merge down is that to perform matrix transform.   In linear algebra, we know that the transpose of a matrix is obtained by swapping its rows and columns, and taking the transpose of this result gives us the original matrix.</p> </li> <li> <p>Therefore we can implement matrix merge up as the following</p> </li> </ul> <pre><code>transpose(matrix);\n... // matrix merge left code goes here\ntranspose(matrix);\n</code></pre> <ul> <li>Same for matrix merge down</li> </ul> <pre><code>transpose(matrix);\n... // matrix merge right code goes here\ntranspose(matrix);\n</code></pre> <p>We have now designed all the operation that 2048 needed!</p> <ul> <li> matrix merge left</li> <li> matrix merge right</li> <li> matrix merge up</li> <li> matrix merge down</li> </ul> <p>We are now ready to code! \ud83e\udd29</p>"},{"location":"rust-blogs/#implementation","title":"Implementation","text":""},{"location":"rust-blogs/#creating-project","title":"Creating Project","text":"<ul> <li>Create <code>Rust</code> project with the following command:</li> </ul> <pre><code>$ cargo new game2048\n---&gt; 100%\n</code></pre> <ul> <li>Current Project Structure (ignore file <code>.gitignore</code> and folder <code>/target</code>)</li> </ul> <pre><code>game2048/\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src/\n\u2514\u2500\u2500 main.rs\n</code></pre>"}]}